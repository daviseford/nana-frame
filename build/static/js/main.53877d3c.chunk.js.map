{"version":3,"sources":["util/env.ts","util/aws.ts","hooks/useInterval.ts","style/bgColors.ts","components/Album/index.tsx","util/delete.ts","util/rotate.ts","components/Admin/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["ENV","API_ACCESS_KEY","process","API_URL","BUCKET_HREF","BUCKET_PREFIX","BUCKET","COGNITO_IDENTITY","REGION","console","log","Bucket","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","truncatedData","truncatedMapper","x","map","y","Contents","filter","z","getTruncated","data","a","Prefix","ContinuationToken","NextContinuationToken","IsTruncated","mappedData","listObjectsV2","MaxKeys","promise","newData","push","getUrlsFromBucket","truncatedEntries","Error","contents","flat","entries","sortBy","Key","reverse","error","message","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","listOfBgColors","AutoplaySlider","withAutoplay","AwesomeSlider","NoUrlsFound","className","Album","photos","useState","urls","setUrls","length","undefined","setTimeout","play","cancelOnInteraction","interval","fillParent","buttons","url","data-src","style","backgroundColor","sample","key","delImage","replace","trim","request","access_key","axios","post","res","rotateImage","degree","Col","width","src","alt","type","onClick","Pagination","chunks","setIdx","idx","i","Admin","useMemo","chunk","document","body","overflow","u","App","updateInterval","fn","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53877d3c.chunk.js","sourcesContent":["const ENV = {\n  API_ACCESS_KEY: process.env.REACT_APP_API_ACCESS_KEY as string,\n  API_URL: process.env.REACT_APP_API_URL as string,\n  BUCKET_HREF: process.env.REACT_APP_BUCKET_HREF as string,\n  BUCKET_PREFIX: process.env.REACT_APP_BUCKET_PREFIX as string,\n  BUCKET: process.env.REACT_APP_BUCKET as string,\n  COGNITO_IDENTITY: process.env.REACT_APP_COGNITO_IDENTITY as string,\n  REGION: process.env.REACT_APP_REGION as string,\n};\n\nconsole.log(\"ENV\", ENV);\n\nexport default ENV;\n","import AWS from \"aws-sdk\";\nimport { sortBy } from \"lodash\";\nimport type { PromiseResult } from \"aws-sdk/lib/request\";\nimport ENV from \"./env\";\n\nconst Bucket = ENV.BUCKET;\nconst MaxKeys = 1000;\n\nAWS.config.region = ENV.REGION;\n\n// Initialize the Amazon Cognito credentials provider (optional)\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: ENV.COGNITO_IDENTITY,\n});\n\n// Create a new service object\nconst s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: { Bucket },\n});\n\ntype TData = PromiseResult<AWS.S3.ListObjectsV2Output, AWS.AWSError>;\n\nlet truncatedData: TData[] = [];\n\nconst truncatedMapper = (x: typeof truncatedData): TData[\"Contents\"][] => {\n  return x.map((y) => y.Contents).filter((z) => !!z);\n};\n\nconst getTruncated = async (data: TData): Promise<TData[\"Contents\"][]> => {\n  const {\n    Prefix,\n    NextContinuationToken: ContinuationToken,\n    IsTruncated,\n  } = data;\n\n  // If we're done fetching, return the data\n  if (!IsTruncated || !ContinuationToken) {\n    const mappedData = truncatedMapper(truncatedData);\n    truncatedData = []; // Clear our array\n    return mappedData;\n  }\n\n  try {\n    const newData = await s3\n      .listObjectsV2({ Prefix, Bucket, ContinuationToken, MaxKeys })\n      .promise();\n\n    // If we didn't get anything, return the existing data\n    if (!newData || !newData.Contents) {\n      const mappedData = truncatedMapper(truncatedData);\n      truncatedData = []; // Clear our array\n      return mappedData;\n    }\n\n    truncatedData.push(newData);\n    return getTruncated(newData);\n  } catch (err) {\n    console.log(err);\n    return truncatedMapper(truncatedData);\n  }\n};\n\n// Returns a list of URLs from our bucket\nexport const getUrlsFromBucket = async (): Promise<string[] | void> => {\n  try {\n    const Prefix = ENV.BUCKET_PREFIX;\n\n    const data = await s3.listObjectsV2({ Prefix, Bucket, MaxKeys }).promise();\n    const truncatedEntries = await getTruncated(data);\n\n    if (!data.Contents) throw new Error(\"Missing data.Contents!\");\n\n    const contents = [data.Contents, ...truncatedEntries].flat();\n\n    // Sort newest -> oldest\n    const entries = sortBy(\n      contents\n        .map((x) => (x ? `${ENV.BUCKET_HREF}${x.Key}` : \"\"))\n        .filter((x) => x !== \"\" && x !== `${ENV.BUCKET_HREF}${Prefix}`)\n    ).reverse();\n\n    return entries;\n  } catch (err) {\n    console.error(\"There was an error viewing your bucket: \" + err.message);\n    return [];\n  }\n};\n","import  { useEffect, useRef } from \"react\";\n\n/**\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback\n * @param delay\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef<any>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","const listOfBgColors = [\n  \"#B53BA0\",\n  \"#55C2C0\",\n  \"#51B899\",\n  \"#558AC2\",\n  \"#5495AB\",\n  \"#5168B8\",\n  \"#79D8F7\",\n  \"#C3EAF7\",\n  \"#5775DE\",\n  \"#F7CF60\",\n  \"#92DEF7\",\n  \"#828EFA\",\n  \"#545CAB\",\n  \"#252B5E\",\n  \"#F7F560\",\n  \"#C3C9F7\",\n  \"#7986F7\",\n  \"#C3C9F7\",\n  \"#2235AD\",\n  \"#1A7BAD\",\n  \"#324DFA\",\n  \"#341DC4\",\n  \"#1D60C4\",\n  \"#5C1CBA\",\n  \"#BD07B6\",\n  \"#2335AD\",\n  \"#671DC4\",\n  \"#1D91C4\",\n  \"#1CBA90\",\n];\n\nexport default listOfBgColors;\n","import React, { useEffect, useState } from \"react\";\nimport { sample } from \"lodash\";\n\nimport AwesomeSlider from \"react-awesome-slider\";\nimport withAutoplay from \"react-awesome-slider/dist/autoplay\";\n\nimport \"./Album.css\";\nimport listOfBgColors from \"../../style/bgColors\";\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\nconst NoUrlsFound = () => {\n  return (\n    <div>\n      <div className={\"def-error\"}>\n        No pictures found yet.\n        <br />\n        <br />\n        We love you Nana!\n      </div>\n    </div>\n  );\n};\n\nconst Album: React.FC<{ photos?: string[] }> = ({ photos }) => {\n  const [urls, setUrls] = useState([] as string[] | undefined);\n\n  // When we get a new photo, we want to display it immediately.\n  useEffect(() => {\n    if (photos?.length !== urls?.length) {\n      setUrls(undefined);\n      setTimeout(() => setUrls(photos), 100);\n    }\n  }, [photos, urls]);\n\n  if (!urls?.length) return <NoUrlsFound />;\n\n  return (\n    <div>\n      <AutoplaySlider\n        play={true}\n        cancelOnInteraction={false}\n        interval={5000}\n        fillParent={true}\n        buttons={false}\n      >\n        {urls.map((url) => (\n          <div\n            data-src={url}\n            style={{ backgroundColor: sample(listOfBgColors) }}\n            key={url}\n          />\n        ))}\n      </AutoplaySlider>\n    </div>\n  );\n};\n\nexport default Album;\n","import axios from \"axios\";\nimport ENV from \"./env\";\n\nconst delImage = async (url: string) => {\n  try {\n    const Key = url.replace(ENV.BUCKET_HREF, \"\").trim()\n    const request = {\n      Bucket: ENV.BUCKET,\n      Key,\n      access_key: ENV.API_ACCESS_KEY,\n    };\n\n    const res = await axios.post(`${ENV.API_URL}/delete_image`, request);\n\n    console.log(res);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport default delImage;\n","import axios from \"axios\";\nimport ENV from \"./env\";\n\nconst rotateImage = async (url: string, degree: number) => {\n  try {\n    const Key = url.replace(ENV.BUCKET_HREF, \"\").trim()\n    const request = {\n      Bucket: ENV.BUCKET,\n      Key,\n      degree,\n      access_key: ENV.API_ACCESS_KEY,\n    };\n\n    const res = await axios.post(`${ENV.API_URL}/rotate_image`, request);\n\n    console.log(`Rotated image ${degree} degrees`, res);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport default rotateImage;\n","import React, { useState, useMemo } from \"react\";\nimport { chunk } from \"lodash\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport delImage from \"../../util/delete\";\nimport rotateImage from \"../../util/rotate\";\n\nconst Admin: React.FC<{ urls?: string[] }> = ({ urls = [] }) => {\n  const [idx, setIdx] = useState(0);\n  const chunks = useMemo(() => chunk(urls, 20), [urls]);\n\n  if (chunks.length === 0) return <div>No images found.</div>;\n\n  // Need to show scrollbars\n  document.body.style.overflow = \"auto\";\n\n  return (\n    <div className={\"container\"}>\n      <div className=\"album py-3 bg-light\">\n        <section className=\"jumbotron text-center\">\n          <div className=\"container\">\n            <h2>Admin Panel</h2>\n            <p>{urls.length} images available.</p>\n            <Pagination chunks={chunks} idx={idx} setIdx={setIdx} />\n          </div>\n        </section>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            {chunks[idx] && chunks[idx].map((u) => <Col url={u} key={u} />)}\n          </div>\n          <div className=\"row text-center\">\n            <div className=\"col\">\n              <Pagination chunks={chunks} idx={idx} setIdx={setIdx} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Col: React.FC<{ url: string }> = ({ url }) => {\n  return (\n    <div className=\"col-md-4\">\n      <div className=\"card mb-4 shadow-sm\">\n        <img className=\"card-img-top\" width=\"100%\" src={url} alt={url} />\n        <div className=\"card-body\">\n          <p className=\"card-text\">{url}</p>\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div className=\"btn-group\">\n              <button\n                type=\"button\"\n                className=\"btn btn-sm btn-outline-primary mx-1\"\n                onClick={() => rotateImage(url, 180)}\n              >\n                Rotate Left\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-sm btn-outline-danger mx-1\"\n                onClick={() => delImage(url)}\n              >\n                Delete\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-sm btn-outline-primary mx-1\"\n                onClick={() => rotateImage(url, 0)}\n              >\n                Rotate Right\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface IPaginationProps {\n  chunks: string[][];\n  setIdx: (i: number) => void;\n  idx: number;\n}\n\nconst Pagination: React.FC<IPaginationProps> = ({ chunks, setIdx, idx }) => {\n  return (\n    <p>\n      {chunks.map((x, i) => {\n        return (\n          <button\n            type=\"button\"\n            onClick={() => setIdx(i)}\n            className={`btn btn-${\n              idx === i ? \"primary\" : \"secondary\"\n            } my-2 mx-1`}\n            key={i}\n          >\n            {i + 1}\n          </button>\n        );\n      })}\n    </p>\n  );\n};\n\nexport default Admin;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { getUrlsFromBucket } from \"../util/aws\";\nimport useInterval from \"../hooks/useInterval\";\nimport Album from \"./Album\";\nimport Admin from \"./Admin\";\n\nconst getMins = (desired_mins: number) => desired_mins * 1000 * 60;\n\nconst MINS_BETWEEN_UPDATE = 1;\n\nconst App = () => {\n  const [urls, setUrls] = useState<string[] | undefined>(undefined);\n  const updateInterval = getMins(MINS_BETWEEN_UPDATE);\n\n  // Fetch pictures on first load (only run once)\n  useEffect(() => {\n    const fn = async () => {\n      const data = await getUrlsFromBucket();\n      if (data) setUrls(data);\n    };\n    fn();\n    // eslint-disable-next-line\n  }, []);\n\n  // Check for new pictures regularly\n  useInterval(() => {\n    const fn = async () => {\n      const data = await getUrlsFromBucket();\n      if (data) setUrls(data);\n      console.log(\n        `Just checked for updates. Next update in ${MINS_BETWEEN_UPDATE} minute${\n          MINS_BETWEEN_UPDATE === 1 ? \"\" : \"s\"\n        }.`\n      );\n    };\n    fn();\n  }, updateInterval);\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/admin\">\n          <Admin urls={urls} />\n        </Route>\n        <Route path=\"/\">\n          <Album photos={urls} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"core-js/stable\"; // polyfills\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}