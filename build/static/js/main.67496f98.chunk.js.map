{"version":3,"sources":["creds/aws.ts","hooks/useInterval.ts","style/bgColors.ts","Album.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","Bucket","truncatedData","truncatedMapper","x","map","y","Contents","filter","z","getTruncated","data","a","Prefix","ContinuationToken","NextContinuationToken","IsTruncated","listObjectsV2","promise","newData","push","console","log","getFiles","s3Path","href","MaxKeys","truncatedEntries","Error","contents","flat","entries","sortBy","Key","reverse","error","message","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","listOfBgColors","AutoplaySlider","withAutoplay","AwesomeSlider","Album","photos","useState","urls","setUrls","length","undefined","setTimeout","play","cancelOnInteraction","interval","fillParent","buttons","url","data-src","style","backgroundColor","sample","key","className","App","updateInterval","fn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67496f98.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\r\nimport { PromiseResult } from \"aws-sdk/lib/request\";\r\nimport { sortBy } from \"lodash\";\r\n\r\nconst Bucket = \"nana-media\";\r\nconst Region = \"us-east-1\";\r\n// Initialize the Amazon Cognito credentials provider\r\nAWS.config.region = Region;\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n  IdentityPoolId: \"us-east-1:3a445c96-1f34-4459-b18c-91f99b16cbf4\",\r\n});\r\n\r\n// Create a new service object\r\nconst s3 = new AWS.S3({\r\n  apiVersion: \"2006-03-01\",\r\n  params: { Bucket },\r\n});\r\n\r\ntype TData = PromiseResult<AWS.S3.ListObjectsV2Output, AWS.AWSError>;\r\n\r\nlet truncatedData: TData[] = [];\r\n\r\nconst truncatedMapper = (x: typeof truncatedData): TData[\"Contents\"][] => {\r\n  return x.map((y) => y.Contents).filter((z) => !!z);\r\n};\r\n\r\nconst getTruncated = async (data: TData): Promise<TData[\"Contents\"][]> => {\r\n  const {\r\n    Prefix,\r\n    NextContinuationToken: ContinuationToken,\r\n    IsTruncated,\r\n  } = data;\r\n\r\n  if (!IsTruncated || !ContinuationToken) return truncatedMapper(truncatedData);\r\n\r\n  try {\r\n    const newData = await s3\r\n      .listObjectsV2({ Prefix, Bucket, ContinuationToken })\r\n      .promise();\r\n\r\n    if (!newData || !newData.Contents) return truncatedMapper(truncatedData);\r\n\r\n    truncatedData.push(newData);\r\n    return getTruncated(newData);\r\n  } catch (err) {\r\n    console.log(err);\r\n    return truncatedMapper(truncatedData);\r\n  }\r\n};\r\n\r\n// Returns a list of URLs\r\nexport const getFiles = async (\r\n  s3Path: \"uploads/\" | \"json/\"\r\n): Promise<string[] | void> => {\r\n  const href = \"https://nana-media.s3.amazonaws.com/\";\r\n\r\n  try {\r\n    const data = await s3\r\n      .listObjectsV2({ Prefix: s3Path, Bucket, MaxKeys: 1000 })\r\n      .promise();\r\n    const truncatedEntries = await getTruncated(data);\r\n\r\n    if (!data.Contents) throw new Error();\r\n\r\n    const contents = [data.Contents, ...truncatedEntries].flat();\r\n\r\n    const entries = sortBy(\r\n      contents\r\n        .map((x) => (x ? href + x.Key : \"\"))\r\n        .filter((x) => x !== \"\" && x !== href + s3Path)\r\n    ).reverse();\r\n\r\n    return entries;\r\n  } catch (err) {\r\n    console.error(\"There was an error viewing your bucket: \" + err.message);\r\n    return [];\r\n  }\r\n};\r\n","import  { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n * @param callback\r\n * @param delay\r\n */\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef<any>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","const listOfBgColors = [\r\n  \"#B53BA0\",\r\n  \"#55C2C0\",\r\n  \"#51B899\",\r\n  \"#558AC2\",\r\n  \"#5495AB\",\r\n  \"#5168B8\",\r\n  \"#79D8F7\",\r\n  \"#C3EAF7\",\r\n  \"#5775DE\",\r\n  \"#F7CF60\",\r\n  \"#92DEF7\",\r\n  \"#828EFA\",\r\n  \"#545CAB\",\r\n  \"#252B5E\",\r\n  \"#F7F560\",\r\n  \"#C3C9F7\",\r\n  \"#7986F7\",\r\n  \"#C3C9F7\",\r\n  \"#2235AD\",\r\n  \"#1A7BAD\",\r\n  \"#324DFA\",\r\n  \"#341DC4\",\r\n  \"#1D60C4\",\r\n  \"#5C1CBA\",\r\n  \"#BD07B6\",\r\n  \"#2335AD\",\r\n  \"#671DC4\",\r\n  \"#1D91C4\",\r\n  \"#1CBA90\",\r\n];\r\n\r\nexport default listOfBgColors;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { sample } from \"lodash\";\r\n\r\nimport AwesomeSlider from \"react-awesome-slider\";\r\nimport withAutoplay from \"react-awesome-slider/dist/autoplay\";\r\n\r\nimport \"./Album.css\";\r\nimport listOfBgColors from \"./style/bgColors\";\r\n\r\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\r\n\r\nconst Album: React.FC<{ photos?: string[] }> = ({ photos }) => {\r\n  const [urls, setUrls] = useState([] as string[] | undefined);\r\n\r\n  // When we get a new photo, we want to display it immediately.\r\n  useEffect(() => {\r\n    if (photos?.length !== urls?.length) {\r\n      setUrls(undefined);\r\n      setTimeout(() => setUrls(photos), 100);\r\n    }\r\n  }, [photos, urls]);\r\n\r\n  if (!urls?.length) return <></>;\r\n\r\n  return (\r\n    <AutoplaySlider\r\n      play={true}\r\n      cancelOnInteraction={false}\r\n      interval={5000}\r\n      fillParent={true}\r\n      buttons={false}\r\n    >\r\n      {urls.map((url) => (\r\n        <div\r\n          data-src={url}\r\n          style={{ backgroundColor: sample(listOfBgColors) }}\r\n          key={url}\r\n        />\r\n      ))}\r\n    </AutoplaySlider>\r\n  );\r\n};\r\n\r\nexport default Album;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { getFiles } from \"./creds/aws\";\r\nimport useInterval from \"./hooks/useInterval\";\r\nimport Album from \"./Album\";\r\n\r\nconst getMins = (desired_mins: number) => desired_mins * 1000 * 60;\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className={\"def-error\"}>\r\n      No pictures found yet.\r\n      <br />\r\n      <br />\r\n      We love you Nana!\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MINS_BETWEEN_UPDATE = 1;\r\n\r\nfunction App() {\r\n  const [urls, setUrls] = useState<string[] | undefined>(undefined);\r\n  const updateInterval = getMins(MINS_BETWEEN_UPDATE);\r\n\r\n  // Fetch pictures on first load (only run once)\r\n  useEffect(() => {\r\n    const fn = async () => {\r\n      const data = await getFiles(\"uploads/\");\r\n      if (data) setUrls(data);\r\n    };\r\n    fn();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Check for new pictures regularly\r\n  useInterval(() => {\r\n    const fn = async () => {\r\n      const data = await getFiles(\"uploads/\");\r\n      if (data) setUrls(data);\r\n      console.log(\r\n        `Just checked for updates. Next update in ${MINS_BETWEEN_UPDATE} minute${\r\n          MINS_BETWEEN_UPDATE === 1 ? \"\" : \"s\"\r\n        }.`\r\n      );\r\n    };\r\n    fn();\r\n  }, updateInterval);\r\n\r\n  return (\r\n    <div>\r\n      <Album photos={urls} />\r\n      {(!urls || !urls.length) && <Error />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"core-js/stable\"; // polyfills\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}