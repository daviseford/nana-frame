{"version":3,"sources":["creds/aws.ts","hooks/useInterval.ts","style/bgColors.ts","Album.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","Bucket","truncatedData","truncatedMapper","x","map","y","Contents","filter","z","getTruncated","data","a","Prefix","ContinuationToken","NextContinuationToken","IsTruncated","listObjectsV2","promise","newData","push","console","log","getSlideshowFiles","imgPath","href","MaxKeys","truncatedEntries","Error","contents","flat","photos","sortBy","photo","Key","reverse","error","message","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","listOfBgColors","AutoplaySlider","withAutoplay","AwesomeSlider","Album","useState","urls","setUrls","length","undefined","setTimeout","play","cancelOnInteraction","interval","fillParent","buttons","url","data-src","style","backgroundColor","sample","key","className","App","album","setAlbum","fn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7b87e3e0.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\nimport { PromiseResult } from \"aws-sdk/lib/request\";\nimport { sortBy } from \"lodash\";\n\nconst Bucket = \"nana-media\";\nconst Region = \"us-east-1\";\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = Region;\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: \"us-east-1:3a445c96-1f34-4459-b18c-91f99b16cbf4\",\n});\n\n// Create a new service object\nconst s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: { Bucket },\n});\n\nexport interface IAlbum {\n  photos: string[]; // urls\n}\n\ntype TData = PromiseResult<AWS.S3.ListObjectsV2Output, AWS.AWSError>;\n\nlet truncatedData: TData[] = [];\n\nconst truncatedMapper = (x: typeof truncatedData): TData[\"Contents\"][] => {\n  return x.map((y) => y.Contents).filter((z) => !!z);\n};\n\nconst getTruncated = async (data: TData): Promise<TData[\"Contents\"][]> => {\n  const {\n    Prefix,\n    NextContinuationToken: ContinuationToken,\n    IsTruncated,\n  } = data;\n\n  if (!IsTruncated || !ContinuationToken) return truncatedMapper(truncatedData);\n\n  try {\n    const newData = await s3\n      .listObjectsV2({ Prefix, Bucket, ContinuationToken })\n      .promise();\n\n    if (!newData || !newData.Contents) return truncatedMapper(truncatedData);\n\n    truncatedData.push(newData);\n    return getTruncated(newData);\n  } catch (err) {\n    console.log(err);\n    return truncatedMapper(truncatedData);\n  }\n};\n\n// Show the photos that exist in an album.\nexport const getSlideshowFiles = async (): Promise<IAlbum | void> => {\n  const imgPath = \"uploads/\";\n  const href = \"https://nana-media.s3.amazonaws.com/\";\n  try {\n    const data = await s3\n      .listObjectsV2({ Prefix: imgPath, Bucket, MaxKeys: 1000 })\n      .promise();\n    const truncatedEntries = await getTruncated(data);\n\n    if (!data.Contents) throw new Error();\n\n    const contents = [data.Contents, ...truncatedEntries].flat();\n\n    const photos = sortBy(\n      contents\n        .map((photo) => (photo ? href + photo.Key : \"\"))\n        .filter((x) => x !== \"\" && x !== href + imgPath)\n    ).reverse();\n\n    return { photos };\n  } catch (err) {\n    return console.error(\n      \"There was an error viewing your album: \" + err.message\n    );\n  }\n};\n","import  { useEffect, useRef } from \"react\";\n\n/**\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback\n * @param delay\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef<any>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","const listOfBgColors = [\n  \"#B53BA0\",\n  \"#55C2C0\",\n  \"#51B899\",\n  \"#558AC2\",\n  \"#5495AB\",\n  \"#5168B8\",\n  \"#79D8F7\",\n  \"#C3EAF7\",\n  \"#5775DE\",\n  \"#F7CF60\",\n  \"#92DEF7\",\n  \"#828EFA\",\n  \"#545CAB\",\n  \"#252B5E\",\n  \"#F7F560\",\n  \"#C3C9F7\",\n  \"#7986F7\",\n  \"#C3C9F7\",\n  \"#2235AD\",\n  \"#1A7BAD\",\n  \"#324DFA\",\n  \"#341DC4\",\n  \"#1D60C4\",\n  \"#5C1CBA\",\n  \"#BD07B6\",\n  \"#2335AD\",\n  \"#671DC4\",\n  \"#1D91C4\",\n  \"#1CBA90\",\n];\n\nexport default listOfBgColors;\n","import React, { useEffect, useState } from \"react\";\nimport { sample } from \"lodash\";\n\nimport AwesomeSlider from \"react-awesome-slider\";\nimport withAutoplay from \"react-awesome-slider/dist/autoplay\";\n\nimport \"./Album.css\";\nimport { IAlbum } from \"./creds/aws\";\nimport listOfBgColors from \"./style/bgColors\";\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\nconst Album: React.FC<{ photos?: IAlbum[\"photos\"] }> = ({ photos }) => {\n  const [urls, setUrls] = useState([] as string[] | undefined);\n\n  // When we get a new photo, we want to display it immediately.\n  useEffect(() => {\n    if (photos?.length !== urls?.length) {\n      setUrls(undefined);\n      setTimeout(() => setUrls(photos), 100);\n    }\n  }, [photos, urls]);\n\n  if (!urls?.length) return <></>;\n\n  return (\n    <AutoplaySlider\n      play={true}\n      cancelOnInteraction={false}\n      interval={5000}\n      fillParent={true}\n      buttons={false}\n    >\n      {urls.map((url) => (\n        <div\n          data-src={url}\n          style={{ backgroundColor: sample(listOfBgColors) }}\n          key={url}\n        />\n      ))}\n    </AutoplaySlider>\n  );\n};\n\nexport default Album;\n","import \"core-js/stable\"; // polyfills\nimport React, { useState, useEffect } from \"react\";\n\nimport { getSlideshowFiles, IAlbum } from \"./creds/aws\";\nimport useInterval from \"./hooks/useInterval\";\nimport Album from \"./Album\";\nimport './index.css'\n\n// const getSecs = (desired_secs: number) => desired_secs * 1000\nconst getMins = (desired_mins: number) => desired_mins * 1000 * 60;\n\nconst Error = () => {\n  return (\n    <div className={\"def-error\"}>\n      No pictures found yet.\n      <br />\n      <br />\n      We love you Nana!\n    </div>\n  );\n};\n\nfunction App() {\n  const [album, setAlbum] = useState<IAlbum | undefined>(undefined);\n\n  // Fetch pictures on first load\n  useEffect(() => {\n    const fn = async () => {\n      const data = await getSlideshowFiles();\n      if (data) setAlbum(data);\n    };\n    fn();\n    // Only run once\n  }, []);\n\n  useInterval(() => {\n    const fn = async () => {\n      const data = await getSlideshowFiles();\n      if (data) setAlbum(data);\n    };\n    fn();\n  }, getMins(0.1));\n\n  console.log(album);\n\n  return (\n    <div >\n      <Album photos={album?.photos || []} />\n\n      {(!album || !album.photos.length) && <Error />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}