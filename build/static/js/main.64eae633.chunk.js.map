{"version":3,"sources":["creds/aws.ts","Album.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","Bucket","getSlideshowFiles","a","imgPath","listObjectsV2","Prefix","promise","data","href","Contents","Error","photos","map","photo","photoKey","Key","filter","x","alert","message","AutoplaySlider","withAutoplay","AwesomeSlider","Album","props","album","length","play","cancelOnInteraction","interval","animation","fillParent","className","p","data-src","key","App","useState","undefined","setAlbum","run","setRun","useEffect","setTimeout","fn","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6PAGAA,IAAIC,OAAOC,OAAS,YACpBF,IAAIC,OAAOE,YAAc,IAAIH,IAAII,2BAA2B,CAC1DC,eAAgB,mDAGlB,IAGMC,EAAK,IAAIN,IAAIO,GAAG,CACpBC,WAAY,aACZC,OAAQ,CAAEC,OALG,gBAaFC,EAAiB,uCAAG,kCAAAC,EAAA,6DACzBC,EAAU,WADe,kBAGVP,EAAGQ,cAAc,CAAEC,OAAQF,EAASH,OAhB5C,eAgBsDM,UAHpC,UAGvBC,EAHuB,OAIvBC,EAAO,uCAERD,EAAKE,SANmB,sBAMH,IAAIC,MAAM,qBANP,cAQvBC,EAASJ,EAAKE,SAASG,KAAI,SAACC,GAChC,IAAMC,EAAWD,EAAME,IACvB,OAAOP,EAAOM,KACbE,QAAO,SAACC,GAAD,MAAa,KAANA,GAAYA,IAAMT,EAAOL,KAXb,kBAatB,CAAEQ,WAboB,2DAetBO,MAAM,0CAA4C,KAAIC,UAfhC,0DAAH,qD,kCCbxBC,G,OAAiBC,IAAaC,MAsBrBC,EApBD,SAACC,GAA+B,IAAD,EAC3C,OAAI,UAACA,EAAMC,aAAP,aAAC,EAAad,OAAOe,QAGvB,kBAACN,EAAD,CACEO,MAAM,EACNC,qBAAqB,EACrBC,SAAU,IACVC,UAAU,WACVC,YAAY,EACZC,UAAU,aAGTR,EAAMC,MAAMd,OAAOC,KAAI,SAACqB,GAAD,OACtB,yBAAKC,WAAUD,EAAGE,IAAKF,QAbW,sCCNpCvB,EAAQ,WACZ,OACE,yBAAKsB,UAAW,aAAhB,qBAEE,6BACA,6BAHF,sBAiDWI,MAxCf,WAAgB,IAAD,EACaC,wBAA6BC,GAD1C,mBACNb,EADM,KACCc,EADD,OAESF,oBAAS,GAFlB,mBAENG,EAFM,KAEDC,EAFC,KAkBb,OAdAC,qBAAU,WASJF,GARI,uCAAG,4BAAAtC,EAAA,sEACUD,IADV,WACHM,EADG,SAECgC,EAAShC,GAEdiC,EAJI,iDAKTG,YAAW,kBAAMF,GAAO,KAAO,KAC/BA,GAAO,GANE,2CAAH,oDAQCG,KACR,CAACJ,IAEJK,QAAQC,IAAIrB,GAGV,oCACE,kBAAC,EAAD,CAAOA,MAAOA,MAEXA,IAAUA,EAAMd,OAAOe,SAAW,kBAAC,EAAD,QC1BvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAM7C,a","file":"static/js/main.64eae633.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\n\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = \"us-east-1\"; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: \"us-east-1:3a445c96-1f34-4459-b18c-91f99b16cbf4\",\n});\n\nconst Bucket = \"nana-media\";\n\n// Create a new service object\nconst s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: { Bucket },\n});\n\nexport interface IAlbum {\n  photos: string[]; // urls\n}\n\n// Show the photos that exist in an album.\nexport const getSlideshowFiles = async (): Promise<IAlbum | void> => {\n  const imgPath = \"uploads/\";\n  try {\n    const data = await s3.listObjectsV2({ Prefix: imgPath, Bucket }).promise();\n    const href = \"https://nana-media.s3.amazonaws.com/\";\n\n    if (!data.Contents) throw new Error(\"No data.Contents!\");\n\n    const photos = data.Contents.map((photo) => {\n      const photoKey = photo.Key as string;\n      return href + photoKey;\n    }).filter((x) => x !== \"\" && x !== href + imgPath);\n\n    return { photos };\n  } catch (err) {\n    return alert(\"There was an error viewing your album: \" + err.message);\n  }\n};\n","import React from \"react\";\n\nimport AwesomeSlider from \"react-awesome-slider\";\nimport withAutoplay from \"react-awesome-slider/dist/autoplay\";\n\nimport \"./Album.css\";\nimport { IAlbum } from \"./creds/aws\";\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\nconst Album = (props: { album?: IAlbum }) => {\n  if (!props.album?.photos.length) return <></>\n\n  return (\n    <AutoplaySlider\n      play={true}\n      cancelOnInteraction={false} // should stop playing on user interaction\n      interval={3000}\n      animation=\"scaleOut\"\n      fillParent={true}\n      className=\"container\"\n      //   media={props.album.photos.map((p) => ({ source: p }))}\n    >\n      {props.album.photos.map((p) => (\n        <div data-src={p} key={p} />\n      ))}\n    </AutoplaySlider>\n  );\n};\n\nexport default Album;\n","import React, { useEffect, useState } from \"react\";\n\nimport { getSlideshowFiles, IAlbum } from \"./creds/aws\";\nimport Album from \"./Album\";\n\nconst Error = () => {\n  return (\n    <div className={\"def-error\"}>\n      No pictures found.\n      <br />\n      <br />\n      We love you Nana!\n    </div>\n  );\n};\n\nfunction App() {\n  const [album, setAlbum] = useState<IAlbum | undefined>(undefined);\n  const [run, setRun] = useState(true);\n\n  useEffect(() => {\n    const fn = async () => {\n      const data = await getSlideshowFiles();\n      if (data) setAlbum(data);\n\n      if (!run) return;\n      setTimeout(() => setRun(true), 10000);\n      setRun(false);\n    };\n    if (run) fn();\n  }, [run]);\n\n  console.log(album);\n\n  return (\n    <>\n      <Album album={album} />\n\n      {(!album || !album.photos.length) && <Error />}\n\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}