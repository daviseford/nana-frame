{"version":3,"sources":["creds/aws.ts","hooks/useInterval.ts","style/bgColors.ts","Album.tsx","App.tsx","serviceWorker.ts","context/useCaptions.tsx","index.tsx"],"names":["Bucket","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","truncatedData","truncatedMapper","x","map","y","Contents","filter","z","getTruncated","data","a","Prefix","ContinuationToken","NextContinuationToken","IsTruncated","listObjectsV2","promise","newData","push","console","log","getFiles","s3Path","href","MaxKeys","truncatedEntries","Error","contents","flat","entries","sortBy","Key","reverse","error","message","getCaptionJson","key","getObject","JSON","parse","Body","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","listOfBgColors","AutoplaySlider","withAutoplay","AwesomeSlider","Album","photos","useState","urls","setUrls","length","undefined","setTimeout","play","cancelOnInteraction","interval","fillParent","buttons","url","data-src","style","backgroundColor","sample","className","App","fn","Boolean","window","location","hostname","match","CaptionContext","React","createContext","CaptionProvider","children","captions","setCaptions","updateCaptionUrls","reduced","reduce","replace","missing","difference","Object","keys","fileFns","Promise","allSettled","files","status","value","fileObj","file","c","Provider","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a4757824.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\nimport { PromiseResult } from \"aws-sdk/lib/request\";\nimport { sortBy } from \"lodash\";\nimport { GetObjectOutput } from \"aws-sdk/clients/s3\";\nimport { ICaption } from \"../context/useCaptions\";\n\nconst Bucket = \"nana-media\";\nconst Region = \"us-east-1\";\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = Region;\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: \"us-east-1:3a445c96-1f34-4459-b18c-91f99b16cbf4\",\n});\n\n// Create a new service object\nconst s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: { Bucket },\n});\n\ntype TData = PromiseResult<AWS.S3.ListObjectsV2Output, AWS.AWSError>;\n\nlet truncatedData: TData[] = [];\n\nconst truncatedMapper = (x: typeof truncatedData): TData[\"Contents\"][] => {\n  return x.map((y) => y.Contents).filter((z) => !!z);\n};\n\nconst getTruncated = async (data: TData): Promise<TData[\"Contents\"][]> => {\n  const {\n    Prefix,\n    NextContinuationToken: ContinuationToken,\n    IsTruncated,\n  } = data;\n\n  if (!IsTruncated || !ContinuationToken) return truncatedMapper(truncatedData);\n\n  try {\n    const newData = await s3\n      .listObjectsV2({ Prefix, Bucket, ContinuationToken })\n      .promise();\n\n    if (!newData || !newData.Contents) return truncatedMapper(truncatedData);\n\n    truncatedData.push(newData);\n    return getTruncated(newData);\n  } catch (err) {\n    console.log(err);\n    return truncatedMapper(truncatedData);\n  }\n};\n\n// Returns a list of URLs\nexport const getFiles = async (\n  s3Path: \"uploads/\" | \"json/\"\n): Promise<string[] | void> => {\n  const href = \"https://nana-media.s3.amazonaws.com/\";\n\n  try {\n    const data = await s3\n      .listObjectsV2({ Prefix: s3Path, Bucket, MaxKeys: 1000 })\n      .promise();\n    const truncatedEntries = await getTruncated(data);\n\n    if (!data.Contents) throw new Error();\n\n    const contents = [data.Contents, ...truncatedEntries].flat();\n\n    const entries = sortBy(\n      contents\n        .map((x) => (x ? href + x.Key : \"\"))\n        .filter((x) => x !== \"\" && x !== href + s3Path)\n    ).reverse();\n\n    return entries;\n  } catch (err) {\n    console.error(\"There was an error viewing your bucket: \" + err.message);\n    return [];\n  }\n};\n\nexport const getCaptionJson = async (key: string): Promise<ICaption | void> => {\n  const prefix = \"json/\";\n\n  try {\n    const data = await s3.getObject({ Key: prefix + key, Bucket }).promise();\n    // @ts-ignore\n    return { ...(JSON.parse(data.Body) as ICaption), key };\n  } catch (err) {\n    return console.error(\n      \"There was an error viewing your bucket: \" + err.message\n    );\n  }\n};\n","import  { useEffect, useRef } from \"react\";\n\n/**\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback\n * @param delay\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef<any>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","const listOfBgColors = [\n  \"#B53BA0\",\n  \"#55C2C0\",\n  \"#51B899\",\n  \"#558AC2\",\n  \"#5495AB\",\n  \"#5168B8\",\n  \"#79D8F7\",\n  \"#C3EAF7\",\n  \"#5775DE\",\n  \"#F7CF60\",\n  \"#92DEF7\",\n  \"#828EFA\",\n  \"#545CAB\",\n  \"#252B5E\",\n  \"#F7F560\",\n  \"#C3C9F7\",\n  \"#7986F7\",\n  \"#C3C9F7\",\n  \"#2235AD\",\n  \"#1A7BAD\",\n  \"#324DFA\",\n  \"#341DC4\",\n  \"#1D60C4\",\n  \"#5C1CBA\",\n  \"#BD07B6\",\n  \"#2335AD\",\n  \"#671DC4\",\n  \"#1D91C4\",\n  \"#1CBA90\",\n];\n\nexport default listOfBgColors;\n","import React, { useEffect, useState } from \"react\";\nimport { sample } from \"lodash\";\n\nimport AwesomeSlider from \"react-awesome-slider\";\nimport withAutoplay from \"react-awesome-slider/dist/autoplay\";\n\nimport \"./Album.css\";\nimport listOfBgColors from \"./style/bgColors\";\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\nconst Album: React.FC<{ photos?: string[] }> = ({ photos }) => {\n  const [urls, setUrls] = useState([] as string[] | undefined);\n\n  // const { urls: jsonUrls } = useCaptions();\n  // console.log(jsonUrls)\n\n  // When we get a new photo, we want to display it immediately.\n  useEffect(() => {\n    if (photos?.length !== urls?.length) {\n      setUrls(undefined);\n      setTimeout(() => setUrls(photos), 100);\n    }\n  }, [photos, urls]);\n\n  if (!urls?.length) return <></>;\n\n  return (\n    <AutoplaySlider\n      play={true}\n      cancelOnInteraction={false}\n      interval={5000}\n      fillParent={true}\n      buttons={false}\n    >\n      {urls.map((url) => (\n        <div\n          data-src={url}\n          style={{ backgroundColor: sample(listOfBgColors) }}\n          key={url}\n        />\n      ))}\n    </AutoplaySlider>\n  );\n};\n\nexport default Album;\n","import \"core-js/stable\"; // polyfills\nimport React, { useState, useEffect } from \"react\";\n\nimport {  getFiles } from \"./creds/aws\";\nimport useInterval from \"./hooks/useInterval\";\nimport Album from \"./Album\";\nimport './index.css'\n\n// const getSecs = (desired_secs: number) => desired_secs * 1000\nconst getMins = (desired_mins: number) => desired_mins * 1000 * 60;\n\nconst Error = () => {\n  return (\n    <div className={\"def-error\"}>\n      No pictures found yet.\n      <br />\n      <br />\n      We love you Nana!\n    </div>\n  );\n};\n\nfunction App() {\n  const [urls, setUrls] = useState<string[] | undefined>(undefined);\n\n  // Fetch pictures on first load\n  useEffect(() => {\n    const fn = async () => {\n      const data = await getFiles('uploads/');\n      if (data) setUrls(data);\n    };\n    fn();\n    // Only run once\n  }, []);\n\n  useInterval(() => {\n    const fn = async () => {\n      const data = await getFiles('uploads/');\n      if (data) setUrls(data);\n    };\n    fn();\n  }, getMins(0.1));\n\n  // console.log(urls);\n\n  return (\n    <div >\n      <Album photos={urls || []} />\n\n      {(!urls || !urls.length) && <Error />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { getFiles, getCaptionJson } from \"../creds/aws\";\nimport { difference } from \"lodash\";\n\nexport interface ICaption {\n  key: string;\n  text?: string;\n  subject?: string;\n  from?: string;\n}\n\ninterface ICaptionProvider {\n  captions: {\n    [key: string]: ICaption;\n  };\n  urls: { [key: string]: string };\n  updateCaptionUrls: () => Promise<void>;\n}\n\nconst CaptionContext = React.createContext<ICaptionProvider | void>(undefined);\n\nconst CaptionProvider: React.FC = ({ children }) => {\n  const [urls, setUrls] = useState({} as ICaptionProvider[\"urls\"]);\n  const [captions, setCaptions] = useState({} as ICaptionProvider[\"captions\"]);\n\n  const updateCaptionUrls = async () => {\n    const data = await getFiles(\"json/\");\n    if (data) {\n      const href = \"https://nana-media.s3.amazonaws.com/json/\";\n\n      const reduced = data.reduce((a, url) => {\n        const filename = url.replace(href, \"\").replace(\".json\", \"\");\n        a[filename] = url;\n        return a;\n      }, {} as ICaptionProvider[\"urls\"]);\n\n      setUrls(reduced);\n    }\n  };\n\n  useEffect(() => {\n    updateCaptionUrls();\n    // Only run once\n    // @ts-ignore\n  }, []);\n\n  useEffect(() => {\n    const fn = async () => {\n      const missing = difference(Object.keys(urls), Object.keys(captions));\n      if (!missing.length) return;\n\n      const fileFns = missing.map((x) => getCaptionJson(x + \".json\"));\n      const files: ICaption[] = (await Promise.allSettled(fileFns))\n        .filter((x) => x.status === \"fulfilled\")\n        // @ts-ignore\n        .map((x) => x.value);\n\n      const fileObj = files.reduce((a, file) => {\n        a[file.key.replace(\".json\", \"\")] = file;\n        return a;\n      }, {});\n\n      setCaptions((c) => ({ ...c, ...fileObj }));\n    };\n    \n    fn();\n  }, [urls, captions]);\n\n  return (\n    <CaptionContext.Provider\n      value={{\n        captions,\n        urls,\n        updateCaptionUrls,\n      }}\n    >\n      {children}\n    </CaptionContext.Provider>\n  );\n};\n\nconst useCaptions = () => {\n  const context = React.useContext(CaptionContext);\n  if (context === undefined) {\n    throw new Error(\"useCaptions must be used within a CaptionProvider\");\n  }\n  return context;\n};\n\nexport { CaptionProvider, useCaptions };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CaptionProvider } from \"./context/useCaptions\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CaptionProvider>\n      <App />\n    </CaptionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}